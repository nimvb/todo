{"version":3,"sources":["component/Input/index.js","model/TodoModel.js","component/Item/index.js","component/List/index.js","component/Status/index.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","event","keyCode","state","value","model","addItemByTtitle","toast","error","position","POSITION","TOP_CENTER","hideProgressBar","bodyClassName","setState","preventDefault","onChange","target","bind","assertThisInitialized","_this2","react_default","a","createElement","lib","autoClose","className","placeholder","autoFocus","Component","TodoItem","types","id","string","title","completed","optional","boolean","actions","self","toggle","changeTitle","changeCompleted","views","itemTitle","itemId","isCompleted","todoList","items","array","mode","addItem","item","push","removeItem","index","findIndex","splice","removeItems","status","filter","require","uuid","setMode","toggleItems","found","undefined","find","length","getItem","completedItems","unCompletedItems","completedItemsCount","unCompletedItemsCount","completedItemExists","empty","unCompletedItemExists","currentItems","create","Item","pnlView","current","style","display","lblTitle","txtEdit","console","log","React","createRef","ref","onDoubleClick","focus","setSelectionRange","type","checked","defaultChecked","onClick","onKeyUp","key","observer","List","onToggleChange","map","component_Item","Status","onChangeListView","btnAll","btnActive","btnComplete","getAttribute","onClearCompletedItems","data-mode","href","App","Input_Input","component_List","component_Status","textAlign","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ac948ea.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nexport default class Input extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.state = {\r\n            value: \"\"\r\n        }\r\n    }\r\n\r\n    onKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n            if ((!this.state.value)) {\r\n\r\n                toast.error(\"Please enter valid task name\", { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    hideProgressBar: true,\r\n                    bodyClassName: \"notify\",\r\n                });\r\n                \r\n            } else {\r\n                this.props.model.addItemByTtitle(this.state.value)\r\n            }\r\n            this.setState({\r\n                value: ''\r\n            })\r\n            event.preventDefault();\r\n\r\n        }\r\n    }\r\n\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            value: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return [\r\n            <ToastContainer autoClose={2000}></ToastContainer>,\r\n            <header className=\"header\">\r\n            \r\n                <h1>todos</h1>\r\n                <input\r\n                    onKeyDown={(event) => this.onKeyDown(event)}\r\n                    onChange={(event) => this.onChange(event)}\r\n                    value={this.state.value}\r\n                    className=\"new-todo\"\r\n                    placeholder=\"What needs to be done?\"\r\n                    autoFocus\r\n                />\r\n            </header>\r\n        ]\r\n    }\r\n}","import { types } from \"mobx-state-tree\";\r\n\r\nconst Data = {\r\n    id: \"0\",\r\n    title: \"Task 1\",\r\n    completed: false\r\n};\r\n\r\nexport const TodoItem = types\r\n    .model({\r\n        id: types.string,\r\n        title: types.string,\r\n        completed: types.optional(types.boolean, false)\r\n    })\r\n    .actions(self => ({\r\n        toggle() {\r\n            self.completed = !self.completed;\r\n        },\r\n        changeTitle(title) {\r\n            self.title = title;\r\n        },\r\n        changeCompleted(completed) {\r\n            self.completed = completed;\r\n        }\r\n    }))\r\n    .views(self => ({\r\n        get itemTitle() {\r\n            return self.title\r\n        },\r\n        get itemId() {\r\n            return self.id\r\n        },\r\n        get isCompleted() {\r\n            return self.completed\r\n        }\r\n\r\n    }));\r\n\r\nexport const TodoList = types\r\n    .model({\r\n        items: types.optional(types.array(TodoItem), []),\r\n        mode: types.optional(types.string, \"all\")\r\n    })\r\n    .actions(self => ({\r\n        addItem(item) {\r\n            self.items.push(item);\r\n        },\r\n        removeItem(id) {\r\n            const index = self.items.findIndex((item) => {\r\n                return item.id === id\r\n            })\r\n            self.items.splice(index, 1);\r\n        },\r\n        removeItems(status) {\r\n            self.items = self.items.filter((item) => {\r\n                return item.completed === !status\r\n            })\r\n        },\r\n        addItemByTtitle(title) {\r\n            let uuid = require('uuid/v4')\r\n            const id = uuid();\r\n            self.items.push({\r\n                id: id,\r\n                title: title,\r\n                completed: false\r\n            })\r\n        },\r\n        setMode(mode) {\r\n            self.mode = mode;\r\n        },\r\n        toggleItems() {\r\n            const found = self.items.find((item) => item.completed === false) !== undefined;\r\n\r\n            for (let index = 0; index < self.items.length; index++) {\r\n                if (found) {\r\n                    self.items[index].changeCompleted(true);\r\n                } else {\r\n                    self.items[index].changeCompleted(false);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }))\r\n    .views(self => ({\r\n        getItem(id) {\r\n            return self.items.filter(item => {\r\n                return item.id === id;\r\n            });\r\n        },\r\n        get completedItems() {\r\n            return self.items.filter(item => {\r\n                return item.completed === true;\r\n            });\r\n        },\r\n        get unCompletedItems() {\r\n            return self.items.filter(item => {\r\n                return item.completed === false;\r\n            });\r\n        },\r\n        get completedItemsCount() {\r\n            return self.items.filter(item => {\r\n                return item.completed === true;\r\n            }).length;\r\n        },\r\n        get unCompletedItemsCount() {\r\n            return self.items.filter(item => {\r\n                return item.completed === false;\r\n            }).length;\r\n        },\r\n        get completedItemExists() {\r\n            return self.items.find((item) => {\r\n                return item.completed === true\r\n            }) !== undefined\r\n\r\n        },\r\n        get empty() {\r\n            return self.items.length === 0;\r\n        },\r\n        get unCompletedItemExists() {\r\n            return self.items.find((item) => {\r\n                return item.completed === false\r\n            }) !== undefined\r\n        },\r\n        get currentItems() {\r\n            if (self.mode === \"all\") {\r\n                return self.items;\r\n            }\r\n            if (self.mode === \"active\") {\r\n                return self.items.filter((item) => {\r\n                    return item.completed === false\r\n                })\r\n            }\r\n            if (self.mode === \"completed\") {\r\n                return self.items.filter((item) => {\r\n                    return item.completed === true\r\n                })\r\n            }\r\n\r\n            return []\r\n        }\r\n    }));\r\n\r\n\r\n\r\nexport const todoList = TodoList.create()\r\n","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { todoList } from \"../../model/TodoModel\"\r\n\r\n\r\nclass Item extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.pnlView = React.createRef();\r\n        this.txtEdit = React.createRef();\r\n        this.lblTitle = React.createRef();\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n    }\r\n\r\n    onKeyDown = (event) => {\r\n        if (event.keyCode === 13) {\r\n            if ((!event.target.value)) {\r\n\r\n                toast.error(\"Please enter valid task name\", { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    hideProgressBar: true,\r\n                    bodyClassName: \"notify\",\r\n                });\r\n            } else {\r\n                this.props.model.changeTitle(event.target.value)\r\n                this.pnlView.current.style.display = 'block';\r\n                this.lblTitle.current.style.display = 'block';\r\n                this.txtEdit.current.style.display = 'none'\r\n                console.log(event.target.value);\r\n            }\r\n            event.preventDefault();\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const completed = this.props.model.isCompleted;\r\n        return (\r\n            <li className={completed ? \"completed\" : \"\"}>\r\n                <div ref={this.pnlView} className=\"view\" onDoubleClick={(event) => { event.target.style.display = 'none'; this.txtEdit.current.style.display = 'block';this.txtEdit.current.value=this.props.model.itemTitle;this.txtEdit.current.focus();this.txtEdit.current.setSelectionRange(this.txtEdit.current.value.length, this.txtEdit.current.value.length); }}>\r\n\r\n                    <input\r\n                        className=\"toggle\"\r\n                        type=\"checkbox\"\r\n                        onChange={event => {\r\n                            console.log(event.target.checked);\r\n                            this.props.model.toggle();\r\n                        }}\r\n                        defaultChecked={completed}\r\n                    />\r\n\r\n                    <label ref={this.lblTitle}>{this.props.model.itemTitle}</label>\r\n                    <button className=\"destroy\" onClick={(event) => {\r\n\r\n                        todoList.removeItem(this.props.model.id)\r\n\r\n                    }} />\r\n                </div>\r\n                <input ref={this.txtEdit} className=\"edit\" onKeyUp={(event) => {\r\n\r\n\r\n                    if (event.key === \"Escape\") {\r\n                        if (this.txtEdit.current.style.display === 'block') {\r\n\r\n                            this.pnlView.current.style.display = 'block';\r\n                            this.lblTitle.current.style.display = 'block';\r\n                            this.txtEdit.current.style.display = 'none'\r\n\r\n                        } else {\r\n\r\n                        }\r\n                    }\r\n                }}\r\n\r\n                    onKeyDown={(event) => this.onKeyDown(event)} />\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default observer(Item);\r\n","import React, { Component } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport Item from '../Item';\r\n\r\n\r\nclass List extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onToggleChange = this.onToggleChange.bind(this)\r\n\r\n    }\r\n\r\n    onToggleChange = (event) => {\r\n\r\n        const found = this.props.model.items.find((item) => item.completed === false) !== undefined;\r\n\r\n        for (let index = 0; index < this.props.model.items.length; index++) {\r\n            if(found){\r\n            this.props.model.items[index].changeCompleted(true);\r\n            }else{\r\n                this.props.model.items[index].changeCompleted(false);\r\n            }\r\n            \r\n        }\r\n\r\n        event.target.checked = !event.target.checked\r\n\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"main\">\r\n\r\n                {\r\n                    /*\r\n                    this.props.model.empty === false ?\r\n                        [\r\n                            <input key={707}  id=\"toggle-all\" className=\"toggle-all\" type=\"checkbox\" onChange={(event) => {this.onToggleChange(event)}} defaultChecked={false}/>,\r\n                            <label key={708} htmlFor=\"toggle-all\">Mark all as complete</label>\r\n                        ]\r\n                        :\r\n                        ''*/\r\n                }\r\n\r\n                <ul className=\"todo-list\">\r\n\r\n                    {\r\n                        this.props.model.currentItems.map((item) => {\r\n                            return (\r\n                                <Item key={item.itemId} model={item}></Item>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default observer(List)","import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass Status extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeListView = this.onChangeListView.bind(this);\r\n    this.onClearCompletedItems = this.onClearCompletedItems.bind(this);\r\n    this.btnActive = React.createRef();\r\n    this.btnComplete = React.createRef();\r\n    this.btnAll = React.createRef();\r\n  }\r\n\r\n  onChangeListView = event => {\r\n    this.btnAll.current.className = \"\";\r\n    this.btnActive.current.className = \"\";\r\n    this.btnComplete.current.className = \"\";\r\n    event.target.className = \"selected\";\r\n    this.props.model.setMode(event.target.getAttribute(\"data-mode\"));\r\n\r\n    event.preventDefault();\r\n  };\r\n\r\n  onClearCompletedItems = event => {\r\n    this.props.model.removeItems(true);\r\n    event.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">\r\n          <strong>{this.props.model.unCompletedItemsCount}</strong> item left\r\n        </span>\r\n\r\n        <ul className=\"filters\">\r\n          <li>\r\n            <a\r\n              data-mode=\"all\"\r\n              ref={this.btnAll}\r\n              className=\"selected\"\r\n              href=\"#/\"\r\n              onClick={event => {\r\n                this.onChangeListView(event);\r\n              }}\r\n            >\r\n              All\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              data-mode=\"active\"\r\n              ref={this.btnActive}\r\n              href=\"#/\"\r\n              onClick={event => {\r\n                this.onChangeListView(event);\r\n              }}\r\n            >\r\n              Active\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a\r\n              data-mode=\"completed\"\r\n              ref={this.btnComplete}\r\n              href=\"#/\"\r\n              onClick={event => {\r\n                this.onChangeListView(event);\r\n              }}\r\n            >\r\n              Completed\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        {this.props.model.completedItemExists ? (\r\n          <button\r\n            className=\"clear-completed\"\r\n            onClick={event => {\r\n              this.onClearCompletedItems(event);\r\n            }}\r\n          >\r\n            Clear completed\r\n          </button>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(Status);\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Input from \"./component/Input\";\nimport List from \"./component/List\";\nimport Status from \"./component/Status\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"todoapp\">\n          <Input model={this.props.model} />\n          <List model={this.props.model} />\n          <Status model={this.props.model}/>\n        </section>\n        <div style={{textAlign:\"center\",fontWeight:700}}>\n        <p>Double-click to edit a todo</p>\n        <p>Press [ESC] to cancel edit mode</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { todoList } from './model/TodoModel'\n\n\nReactDOM.render(<App model={todoList} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}